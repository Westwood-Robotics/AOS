"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class GamepadData(object):

    __slots__ = ["A", "B", "Y", "X", "LS", "RS", "LS2", "RS2", "BK", "ST", "LZ", "RZ", "U", "D", "L", "R", "LX", "LY", "RX", "RY", "L2", "R2"]

    __typenames__ = ["int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.A = 0
        """ LCM Type: int8_t """
        self.B = 0
        """ LCM Type: int8_t """
        self.Y = 0
        """ LCM Type: int8_t """
        self.X = 0
        """ LCM Type: int8_t """
        self.LS = 0
        """ LCM Type: int8_t """
        self.RS = 0
        """ LCM Type: int8_t """
        self.LS2 = 0
        """ LCM Type: int8_t """
        self.RS2 = 0
        """ LCM Type: int8_t """
        self.BK = 0
        """ LCM Type: int8_t """
        self.ST = 0
        """ LCM Type: int8_t """
        self.LZ = 0
        """ LCM Type: int8_t """
        self.RZ = 0
        """ LCM Type: int8_t """
        self.U = 0
        """ LCM Type: int8_t """
        self.D = 0
        """ LCM Type: int8_t """
        self.L = 0
        """ LCM Type: int8_t """
        self.R = 0
        """ LCM Type: int8_t """
        self.LX = 0.0
        """ LCM Type: float """
        self.LY = 0.0
        """ LCM Type: float """
        self.RX = 0.0
        """ LCM Type: float """
        self.RY = 0.0
        """ LCM Type: float """
        self.L2 = 0.0
        """ LCM Type: float """
        self.R2 = 0.0
        """ LCM Type: float """

    def encode(self):
        buf = BytesIO()
        buf.write(GamepadData._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbbbbbbbbbbbbbbbffffff", self.A, self.B, self.Y, self.X, self.LS, self.RS, self.LS2, self.RS2, self.BK, self.ST, self.LZ, self.RZ, self.U, self.D, self.L, self.R, self.LX, self.LY, self.RX, self.RY, self.L2, self.R2))

    @staticmethod
    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != GamepadData._get_packed_fingerprint():
            raise ValueError("Decode error")
        return GamepadData._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = GamepadData()
        self.A, self.B, self.Y, self.X, self.LS, self.RS, self.LS2, self.RS2, self.BK, self.ST, self.LZ, self.RZ, self.U, self.D, self.L, self.R, self.LX, self.LY, self.RX, self.RY, self.L2, self.R2 = struct.unpack(">bbbbbbbbbbbbbbbbffffff", buf.read(40))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if GamepadData in parents: return 0
        tmphash = (0xb195d0d53d22ed17) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if GamepadData._packed_fingerprint is None:
            GamepadData._packed_fingerprint = struct.pack(">Q", GamepadData._get_hash_recursive([]))
        return GamepadData._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", GamepadData._get_packed_fingerprint())[0]

